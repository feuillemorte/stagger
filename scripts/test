#!/usr/bin/python3
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from plano import *

repo_1 = {
    "tags": {}
}

tag_1 = {
    "build_id": "XXX",
    "build_url": "XXX",
    "artifacts": {
        "qpid-jms-client-maven": {
            "type": "maven",
            "group_id": "org.apache.qpid",
            "artifact_id": "qpid-jms-client",
            "version": "0.34.0.redhat-00002",
            "repository_url": "http://download-node-02.eng.bos.redhat.com/devel/candidates/amq/AMQ-CLIENTS-2.1.0/JMS-maven-repo/maven-repository",
        },
        "qpid-jms-zip": {
            "type": "file",
            "url": "http://download-node-02.eng.bos.redhat.com/devel/candidates/amq/AMQ-CLIENTS-2.1.0/qpid-jms-0.34.0.redhat-00002-bin.zip",
        },
    },
}

artifact_1 = {
    "type": "file",
    "url": "http://download-node-03.eng.bos.redhat.com/devel/candidates/amq/AMQ-CLIENTS-2.1.0/qpid-jms-0.34.0.redhat-00003-bin.zip",
}

curl_options = "--fail -o /dev/null -s -w '%{http_code} (%{size_download})\\n' -H 'Content-Type: application/json'"

def put(url, data):
    with temp_file() as data_file:
        write_json(data_file, data)
        print(f"PUT {url} -> ", end="", flush=True)
        call("curl -X PUT {} --data @{} {}", url, data_file, curl_options)

def get(url):
    print(f"GET {url} -> ", end="", flush=True)
    call("curl {} {}", url, curl_options)

def head(url):
    print(f"HEAD {url} -> ", end="", flush=True)
    call("curl --head --include {} {}", url, curl_options)

def delete(url):
    print(f"DELETE {url} -> ", end="", flush=True)
    call("curl -X DELETE {} {}", url, curl_options)

enable_logging(level="warn")

with working_dir("build"):
    server = start_process("stagger")

try:
    sleep(0.2)

    put("http://localhost:8080/api/repos/rh-qpid-jms", repo_1)
    put("http://localhost:8080/api/repos/rh-qpid-jms/tags/0.34.0-amq-tested", tag_1)
    put("http://localhost:8080/api/repos/rh-qpid-jms/tags/0.34.0-amq-tested/artifacts/qpid-jms-zip", artifact_1)

    get("http://localhost:8080/api/repos/rh-qpid-jms")
    get("http://localhost:8080/api/repos/rh-qpid-jms/tags/0.34.0-amq-tested")
    get("http://localhost:8080/api/repos/rh-qpid-jms/tags/0.34.0-amq-tested/artifacts/qpid-jms-zip")

    head("http://localhost:8080/api/repos/rh-qpid-jms")
    head("http://localhost:8080/api/repos/rh-qpid-jms/tags/0.34.0-amq-tested")
    head("http://localhost:8080/api/repos/rh-qpid-jms/tags/0.34.0-amq-tested/artifacts/qpid-jms-zip")

    delete("http://localhost:8080/api/repos/rh-qpid-jms/tags/0.34.0-amq-tested/artifacts/qpid-jms-zip")
    delete("http://localhost:8080/api/repos/rh-qpid-jms/tags/0.34.0-amq-tested")
    delete("http://localhost:8080/api/repos/rh-qpid-jms")

    call("scripts/load-demo-data")
    get("http://localhost:8080/api/data")
    head("http://localhost:8080/api/data")
finally:
    terminate_process(server)
